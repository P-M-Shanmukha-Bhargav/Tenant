/*
Deployment script for HouseApp

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HouseApp"
:setvar DefaultFilePrefix "HouseApp"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping Foreign Key [ROM].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [ROM].[Complaints] DROP CONSTRAINT [FK_Tenant_Room_Details_Id];


GO
PRINT N'Dropping Foreign Key [ROM].[FK_Complaint_Status]...';


GO
ALTER TABLE [ROM].[Complaints] DROP CONSTRAINT [FK_Complaint_Status];


GO
PRINT N'Dropping Foreign Key [ROM].[FK_Tenant_Id]...';


GO
ALTER TABLE [ROM].[TenantRoomDetails] DROP CONSTRAINT [FK_Tenant_Id];


GO
PRINT N'Dropping Foreign Key [ROM].[FK_Room_Id]...';


GO
ALTER TABLE [ROM].[TenantRoomDetails] DROP CONSTRAINT [FK_Room_Id];


GO
PRINT N'Dropping Foreign Key [TRX].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [TRX].[TransactionAmount] DROP CONSTRAINT [FK_Tenant_Room_Details_Id];


GO
PRINT N'Dropping Foreign Key [TRX].[FK_Transaction_Amount_Id]...';


GO
ALTER TABLE [TRX].[TransactionBills] DROP CONSTRAINT [FK_Transaction_Amount_Id];


GO
PRINT N'Dropping Foreign Key [ROM].[FK_Owner_Id]...';


GO
ALTER TABLE [ROM].[Rooms] DROP CONSTRAINT [FK_Owner_Id];


GO
PRINT N'Starting rebuilding table [ROM].[Complaints]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [ROM].[tmp_ms_xx_Complaints] (
    [ComplaintId]         INT             IDENTITY (1, 1) NOT NULL,
    [TenantRoomDetailsId] INT             NOT NULL,
    [Title]               NVARCHAR (1000) NOT NULL,
    [Description]         NVARCHAR (1000) NOT NULL,
    [CreateDate]          DATETIME        NOT NULL,
    [UpdateDate]          DATETIME        NOT NULL,
    [ComplaintStatusId]   INT             NOT NULL,
    [IsActive]            BIT             NOT NULL,
    [UpdatedDate]         DATETIME        NULL,
    [UpdatedBy]           NVARCHAR (100)  NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Complaint_Id1] PRIMARY KEY CLUSTERED ([ComplaintId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [ROM].[Complaints])
    BEGIN
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_Complaints] ON;
        INSERT INTO [ROM].[tmp_ms_xx_Complaints] ([ComplaintId], [TenantRoomDetailsId], [Title], [Description], [CreateDate], [UpdateDate], [ComplaintStatusId], [IsActive], [UpdatedDate], [UpdatedBy])
        SELECT   [ComplaintId],
                 [TenantRoomDetailsId],
                 [Title],
                 [Description],
                 [CreateDate],
                 [UpdateDate],
                 [ComplaintStatusId],
                 [IsActive],
                 [UpdatedDate],
                 [UpdatedBy]
        FROM     [ROM].[Complaints]
        ORDER BY [ComplaintId] ASC;
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_Complaints] OFF;
    END

DROP TABLE [ROM].[Complaints];

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_Complaints]', N'Complaints';

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_constraint_PK_Complaint_Id1]', N'PK_Complaint_Id', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [ROM].[TenantRoomDetails]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [ROM].[tmp_ms_xx_TenantRoomDetails] (
    [TenantRoomDetailsId] INT              IDENTITY (1, 1) NOT NULL,
    [TenantId]            INT              NOT NULL,
    [RoomId]              UNIQUEIDENTIFIER NOT NULL,
    [IsAdvancePaid]       BIT              NOT NULL,
    [RentPaidDate]        INT              NOT NULL,
    [RentedOn]            DATETIME         NOT NULL,
    [IsActive]            BIT              NOT NULL,
    [UpdatedDate]         DATETIME         NULL,
    [UpdatedBy]           NVARCHAR (100)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Tenant_Room_Details_Id1] PRIMARY KEY CLUSTERED ([TenantRoomDetailsId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [ROM].[TenantRoomDetails])
    BEGIN
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_TenantRoomDetails] ON;
        INSERT INTO [ROM].[tmp_ms_xx_TenantRoomDetails] ([TenantRoomDetailsId], [TenantId], [RoomId], [IsAdvancePaid], [RentPaidDate], [RentedOn], [IsActive], [UpdatedDate], [UpdatedBy])
        SELECT   [TenantRoomDetailsId],
                 [TenantId],
                 [RoomId],
                 [IsAdvancePaid],
                 [RentPaidDate],
                 [RentedOn],
                 [IsActive],
                 [UpdatedDate],
                 [UpdatedBy]
        FROM     [ROM].[TenantRoomDetails]
        ORDER BY [TenantRoomDetailsId] ASC;
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_TenantRoomDetails] OFF;
    END

DROP TABLE [ROM].[TenantRoomDetails];

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_TenantRoomDetails]', N'TenantRoomDetails';

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_constraint_PK_Tenant_Room_Details_Id1]', N'PK_Tenant_Room_Details_Id', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [TRX].[TransactionAmount]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [TRX].[tmp_ms_xx_TransactionAmount] (
    [TransactionAmountId] INT            IDENTITY (1, 1) NOT NULL,
    [BillMonth]           INT            NOT NULL,
    [BillYear]            INT            NOT NULL,
    [TenantRoomDetailsId] INT            NOT NULL,
    [PowerAmount]         INT            NOT NULL,
    [WaterAmount]         INT            NOT NULL,
    [PreviousAmount]      INT            NOT NULL,
    [IsActive]            BIT            NOT NULL,
    [UpdatedDate]         DATETIME       NULL,
    [UpdatedBy]           NVARCHAR (100) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Transaction_Amount_Id1] PRIMARY KEY CLUSTERED ([TransactionAmountId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [TRX].[TransactionAmount])
    BEGIN
        SET IDENTITY_INSERT [TRX].[tmp_ms_xx_TransactionAmount] ON;
        INSERT INTO [TRX].[tmp_ms_xx_TransactionAmount] ([TransactionAmountId], [BillMonth], [BillYear], [TenantRoomDetailsId], [PowerAmount], [WaterAmount], [PreviousAmount], [IsActive], [UpdatedDate], [UpdatedBy])
        SELECT   [TransactionAmountId],
                 [BillMonth],
                 [BillYear],
                 [TenantRoomDetailsId],
                 [PowerAmount],
                 [WaterAmount],
                 [PreviousAmount],
                 [IsActive],
                 [UpdatedDate],
                 [UpdatedBy]
        FROM     [TRX].[TransactionAmount]
        ORDER BY [TransactionAmountId] ASC;
        SET IDENTITY_INSERT [TRX].[tmp_ms_xx_TransactionAmount] OFF;
    END

DROP TABLE [TRX].[TransactionAmount];

EXECUTE sp_rename N'[TRX].[tmp_ms_xx_TransactionAmount]', N'TransactionAmount';

EXECUTE sp_rename N'[TRX].[tmp_ms_xx_constraint_PK_Transaction_Amount_Id1]', N'PK_Transaction_Amount_Id', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [USR].[Owners]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [USR].[tmp_ms_xx_Owners] (
    [OwnerId]     INT             IDENTITY (1, 1) NOT NULL,
    [OwnerUId]    NVARCHAR (1000) NOT NULL,
    [DisplayName] NVARCHAR (100)  NOT NULL,
    [EmailId]     NVARCHAR (100)  NOT NULL,
    [PhoneNumber] NVARCHAR (100)  NOT NULL,
    [UpiId]       NVARCHAR (100)  NOT NULL,
    [IsActive]    BIT             NOT NULL,
    [UpdatedDate] DATETIME        NULL,
    [UpdatedBy]   NVARCHAR (100)  NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Owner_Id1] PRIMARY KEY CLUSTERED ([OwnerId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UK_O_Email_Id1] UNIQUE NONCLUSTERED ([EmailId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UK_O_Phone_Number1] UNIQUE NONCLUSTERED ([PhoneNumber] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UK_Upi_Id1] UNIQUE NONCLUSTERED ([UpiId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [USR].[Owners])
    BEGIN
        SET IDENTITY_INSERT [USR].[tmp_ms_xx_Owners] ON;
        INSERT INTO [USR].[tmp_ms_xx_Owners] ([OwnerId], [OwnerUId], [DisplayName], [EmailId], [PhoneNumber], [UpiId], [IsActive], [UpdatedDate], [UpdatedBy])
        SELECT   [OwnerId],
                 [OwnerUId],
                 [DisplayName],
                 [EmailId],
                 [PhoneNumber],
                 [UpiId],
                 [IsActive],
                 [UpdatedDate],
                 [UpdatedBy]
        FROM     [USR].[Owners]
        ORDER BY [OwnerId] ASC;
        SET IDENTITY_INSERT [USR].[tmp_ms_xx_Owners] OFF;
    END

DROP TABLE [USR].[Owners];

EXECUTE sp_rename N'[USR].[tmp_ms_xx_Owners]', N'Owners';

EXECUTE sp_rename N'[USR].[tmp_ms_xx_constraint_PK_Owner_Id1]', N'PK_Owner_Id', N'OBJECT';

EXECUTE sp_rename N'[USR].[tmp_ms_xx_constraint_UK_O_Email_Id1]', N'UK_O_Email_Id', N'OBJECT';

EXECUTE sp_rename N'[USR].[tmp_ms_xx_constraint_UK_O_Phone_Number1]', N'UK_O_Phone_Number', N'OBJECT';

EXECUTE sp_rename N'[USR].[tmp_ms_xx_constraint_UK_Upi_Id1]', N'UK_Upi_Id', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [USR].[Tenants]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [USR].[tmp_ms_xx_Tenants] (
    [TenantId]     INT             IDENTITY (1, 1) NOT NULL,
    [TenantUId]    NVARCHAR (1000) NOT NULL,
    [DisplayName]  NVARCHAR (100)  NOT NULL,
    [EmailId]      NVARCHAR (100)  NOT NULL,
    [PhoneNumber]  NVARCHAR (100)  NOT NULL,
    [AadharNumber] NVARCHAR (100)  NOT NULL,
    [IsActive]     BIT             NOT NULL,
    [UpdatedDate]  DATETIME        NULL,
    [UpdatedBy]    NVARCHAR (100)  NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Tenant_Id1] PRIMARY KEY CLUSTERED ([TenantId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UK_T_Email_Id1] UNIQUE NONCLUSTERED ([EmailId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UK_T_Phone_Number1] UNIQUE NONCLUSTERED ([PhoneNumber] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UK_Aadhar_Number1] UNIQUE NONCLUSTERED ([AadharNumber] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [USR].[Tenants])
    BEGIN
        SET IDENTITY_INSERT [USR].[tmp_ms_xx_Tenants] ON;
        INSERT INTO [USR].[tmp_ms_xx_Tenants] ([TenantId], [TenantUId], [DisplayName], [EmailId], [PhoneNumber], [AadharNumber], [IsActive], [UpdatedDate], [UpdatedBy])
        SELECT   [TenantId],
                 [TenantUId],
                 [DisplayName],
                 [EmailId],
                 [PhoneNumber],
                 [AadharNumber],
                 [IsActive],
                 [UpdatedDate],
                 [UpdatedBy]
        FROM     [USR].[Tenants]
        ORDER BY [TenantId] ASC;
        SET IDENTITY_INSERT [USR].[tmp_ms_xx_Tenants] OFF;
    END

DROP TABLE [USR].[Tenants];

EXECUTE sp_rename N'[USR].[tmp_ms_xx_Tenants]', N'Tenants';

EXECUTE sp_rename N'[USR].[tmp_ms_xx_constraint_PK_Tenant_Id1]', N'PK_Tenant_Id', N'OBJECT';

EXECUTE sp_rename N'[USR].[tmp_ms_xx_constraint_UK_T_Email_Id1]', N'UK_T_Email_Id', N'OBJECT';

EXECUTE sp_rename N'[USR].[tmp_ms_xx_constraint_UK_T_Phone_Number1]', N'UK_T_Phone_Number', N'OBJECT';

EXECUTE sp_rename N'[USR].[tmp_ms_xx_constraint_UK_Aadhar_Number1]', N'UK_Aadhar_Number', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Foreign Key [ROM].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [ROM].[Complaints] WITH NOCHECK
    ADD CONSTRAINT [FK_Tenant_Room_Details_Id] FOREIGN KEY ([TenantRoomDetailsId]) REFERENCES [ROM].[TenantRoomDetails] ([TenantRoomDetailsId]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Complaint_Status]...';


GO
ALTER TABLE [ROM].[Complaints] WITH NOCHECK
    ADD CONSTRAINT [FK_Complaint_Status] FOREIGN KEY ([ComplaintStatusId]) REFERENCES [COM].[ComplaintStatus] ([Id]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Tenant_Id]...';


GO
ALTER TABLE [ROM].[TenantRoomDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_Tenant_Id] FOREIGN KEY ([TenantId]) REFERENCES [USR].[Tenants] ([TenantId]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Room_Id]...';


GO
ALTER TABLE [ROM].[TenantRoomDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_Room_Id] FOREIGN KEY ([RoomId]) REFERENCES [ROM].[Rooms] ([RoomId]);


GO
PRINT N'Creating Foreign Key [TRX].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [TRX].[TransactionAmount] WITH NOCHECK
    ADD CONSTRAINT [FK_Tenant_Room_Details_Id] FOREIGN KEY ([TenantRoomDetailsId]) REFERENCES [ROM].[TenantRoomDetails] ([TenantRoomDetailsId]);


GO
PRINT N'Creating Foreign Key [TRX].[FK_Transaction_Amount_Id]...';


GO
ALTER TABLE [TRX].[TransactionBills] WITH NOCHECK
    ADD CONSTRAINT [FK_Transaction_Amount_Id] FOREIGN KEY ([TransactionAmountId]) REFERENCES [TRX].[TransactionAmount] ([TransactionAmountId]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Owner_Id]...';


GO
ALTER TABLE [ROM].[Rooms] WITH NOCHECK
    ADD CONSTRAINT [FK_Owner_Id] FOREIGN KEY ([OwnerId]) REFERENCES [USR].[Owners] ([OwnerId]);


GO
PRINT N'Creating Check Constraint [USR].[CHK_Owner_UId]...';


GO
ALTER TABLE [USR].[Owners] WITH NOCHECK
    ADD CONSTRAINT [CHK_Owner_UId] CHECK (OwnerUId != null);


GO
PRINT N'Creating Check Constraint [USR].[CHK_Tenant_UId]...';


GO
ALTER TABLE [USR].[Tenants] WITH NOCHECK
    ADD CONSTRAINT [CHK_Tenant_UId] CHECK (TenantUId != null);


GO
PRINT N'Refreshing Procedure [USR].[InsertTenant_V1]...';


GO
EXECUTE sp_refreshsqlmodule N'[USR].[InsertTenant_V1]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [ROM].[Complaints] WITH CHECK CHECK CONSTRAINT [FK_Tenant_Room_Details_Id];

ALTER TABLE [ROM].[Complaints] WITH CHECK CHECK CONSTRAINT [FK_Complaint_Status];

ALTER TABLE [ROM].[TenantRoomDetails] WITH CHECK CHECK CONSTRAINT [FK_Tenant_Id];

ALTER TABLE [ROM].[TenantRoomDetails] WITH CHECK CHECK CONSTRAINT [FK_Room_Id];

ALTER TABLE [TRX].[TransactionAmount] WITH CHECK CHECK CONSTRAINT [FK_Tenant_Room_Details_Id];

ALTER TABLE [TRX].[TransactionBills] WITH CHECK CHECK CONSTRAINT [FK_Transaction_Amount_Id];

ALTER TABLE [ROM].[Rooms] WITH CHECK CHECK CONSTRAINT [FK_Owner_Id];

ALTER TABLE [USR].[Owners] WITH CHECK CHECK CONSTRAINT [CHK_Owner_UId];

ALTER TABLE [USR].[Tenants] WITH CHECK CHECK CONSTRAINT [CHK_Tenant_UId];


GO
PRINT N'Update complete.';


GO
