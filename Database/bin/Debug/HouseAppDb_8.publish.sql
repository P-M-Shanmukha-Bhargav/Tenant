/*
Deployment script for HouseApp

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HouseApp"
:setvar DefaultFilePrefix "HouseApp"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The type for column MaintenanceAmount in table [ROM].[Rooms] is currently  INT NOT NULL but is being changed to  DECIMAL (10, 2) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  DECIMAL (10, 2) NOT NULL.

The type for column RentAmount in table [ROM].[Rooms] is currently  INT NOT NULL but is being changed to  DECIMAL (10, 2) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  DECIMAL (10, 2) NOT NULL.
*/

IF EXISTS (select top 1 1 from [ROM].[Rooms])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [ROM].[TenantRoomDetails].[ExitApproved] on table [ROM].[TenantRoomDetails] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column AdvancePaidDate in table [ROM].[TenantRoomDetails] is currently  INT NOT NULL but is being changed to  DATETIME NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  DATETIME NOT NULL.

The type for column AdvancePendingAmount in table [ROM].[TenantRoomDetails] is currently  INT NOT NULL but is being changed to  DECIMAL (10, 2) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  DECIMAL (10, 2) NOT NULL.
*/

IF EXISTS (select top 1 1 from [ROM].[TenantRoomDetails])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column PowerAmount in table [TRX].[TransactionAmount] is currently  INT NOT NULL but is being changed to  DECIMAL (10, 2) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  DECIMAL (10, 2) NOT NULL.

The type for column PreviousAmount in table [TRX].[TransactionAmount] is currently  INT NOT NULL but is being changed to  DECIMAL (10, 2) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  DECIMAL (10, 2) NOT NULL.

The type for column WaterAmount in table [TRX].[TransactionAmount] is currently  INT NOT NULL but is being changed to  DECIMAL (10, 2) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  DECIMAL (10, 2) NOT NULL.
*/

IF EXISTS (select top 1 1 from [TRX].[TransactionAmount])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column PendingAmount in table [TRX].[TransactionBills] is currently  INT NOT NULL but is being changed to  DECIMAL (10, 2) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  DECIMAL (10, 2) NOT NULL.
*/

IF EXISTS (select top 1 1 from [TRX].[TransactionBills])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping Foreign Key [ROM].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [ROM].[Complaints] DROP CONSTRAINT [FK_Tenant_Room_Details_Id];


GO
PRINT N'Dropping Foreign Key [TRX].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [TRX].[TransactionAmount] DROP CONSTRAINT [FK_Tenant_Room_Details_Id];


GO
PRINT N'Dropping Foreign Key [ROM].[FK_Room_Id]...';


GO
ALTER TABLE [ROM].[TenantRoomDetails] DROP CONSTRAINT [FK_Room_Id];


GO
PRINT N'Altering Table [ROM].[Rooms]...';


GO
ALTER TABLE [ROM].[Rooms] ALTER COLUMN [MaintenanceAmount] DECIMAL (10, 2) NOT NULL;

ALTER TABLE [ROM].[Rooms] ALTER COLUMN [RentAmount] DECIMAL (10, 2) NOT NULL;


GO
PRINT N'Starting rebuilding table [ROM].[TenantRoomDetails]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [ROM].[tmp_ms_xx_TenantRoomDetails] (
    [TenantRoomDetailsId]  INT              IDENTITY (1, 1) NOT NULL,
    [TenantUId]            NVARCHAR (50)    NOT NULL,
    [RoomId]               UNIQUEIDENTIFIER NOT NULL,
    [IsAdvancePaid]        BIT              NOT NULL,
    [AdvancePaidDate]      DATETIME         NOT NULL,
    [AdvancePendingAmount] DECIMAL (10, 2)  NOT NULL,
    [RentPaidDate]         INT              NOT NULL,
    [RentedOn]             DATETIME         NOT NULL,
    [ExitRequestedOn]      DATETIME         NULL,
    [ExitApproved]         BIT              NOT NULL,
    [IsActive]             BIT              NOT NULL,
    [UpdatedDate]          DATETIME         NULL,
    [UpdatedBy]            NVARCHAR (100)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Tenant_Room_Details_Id1] PRIMARY KEY CLUSTERED ([TenantRoomDetailsId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [ROM].[TenantRoomDetails])
    BEGIN
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_TenantRoomDetails] ON;
        INSERT INTO [ROM].[tmp_ms_xx_TenantRoomDetails] ([TenantRoomDetailsId], [TenantUId], [RoomId], [IsAdvancePaid], [AdvancePaidDate], [AdvancePendingAmount], [RentPaidDate], [RentedOn], [IsActive], [UpdatedDate], [UpdatedBy])
        SELECT   [TenantRoomDetailsId],
                 [TenantUId],
                 [RoomId],
                 [IsAdvancePaid],
                 [AdvancePaidDate],
                 [AdvancePendingAmount],
                 [RentPaidDate],
                 [RentedOn],
                 [IsActive],
                 [UpdatedDate],
                 [UpdatedBy]
        FROM     [ROM].[TenantRoomDetails]
        ORDER BY [TenantRoomDetailsId] ASC;
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_TenantRoomDetails] OFF;
    END

DROP TABLE [ROM].[TenantRoomDetails];

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_TenantRoomDetails]', N'TenantRoomDetails';

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_constraint_PK_Tenant_Room_Details_Id1]', N'PK_Tenant_Room_Details_Id', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Table [TRX].[TransactionAmount]...';


GO
ALTER TABLE [TRX].[TransactionAmount] ALTER COLUMN [BillMonth] NVARCHAR (50) NOT NULL;

ALTER TABLE [TRX].[TransactionAmount] ALTER COLUMN [PowerAmount] DECIMAL (10, 2) NOT NULL;

ALTER TABLE [TRX].[TransactionAmount] ALTER COLUMN [PreviousAmount] DECIMAL (10, 2) NOT NULL;

ALTER TABLE [TRX].[TransactionAmount] ALTER COLUMN [WaterAmount] DECIMAL (10, 2) NOT NULL;


GO
PRINT N'Altering Table [TRX].[TransactionBills]...';


GO
ALTER TABLE [TRX].[TransactionBills] ALTER COLUMN [PendingAmount] DECIMAL (10, 2) NOT NULL;


GO
PRINT N'Creating Foreign Key [ROM].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [ROM].[Complaints] WITH NOCHECK
    ADD CONSTRAINT [FK_Tenant_Room_Details_Id] FOREIGN KEY ([TenantRoomDetailsId]) REFERENCES [ROM].[TenantRoomDetails] ([TenantRoomDetailsId]);


GO
PRINT N'Creating Foreign Key [TRX].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [TRX].[TransactionAmount] WITH NOCHECK
    ADD CONSTRAINT [FK_Tenant_Room_Details_Id] FOREIGN KEY ([TenantRoomDetailsId]) REFERENCES [ROM].[TenantRoomDetails] ([TenantRoomDetailsId]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Room_Id]...';


GO
ALTER TABLE [ROM].[TenantRoomDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_Room_Id] FOREIGN KEY ([RoomId]) REFERENCES [ROM].[Rooms] ([RoomId]);


GO
PRINT N'Creating Procedure [ROM].[InsertTenantRoomDetails_V1]...';


GO
CREATE PROCEDURE [ROM].[InsertTenantRoomDetails_V1]
    @TenantRoomDetailsId INT OUTPUT,
	@TenantUId NVARCHAR(100),
	@RoomId UNIQUEIDENTIFIER,
	@IsAdvancePaid BIT,
	@AdvancePaidDate DATETIME,
	@AdvancePendingAmount DECIMAL(10,2),
	@RentPaidDate INT,
	@RentedOn DATETIME,
	@IsActive BIT,
	@UpdatedBy NVARCHAR(100)
AS
BEGIN
INSERT INTO [ROM].[TenantRoomDetails]
           ([TenantUId]
           ,[RoomId]
           ,[IsAdvancePaid]
           ,[AdvancePaidDate]
           ,[AdvancePendingAmount]
           ,[RentPaidDate]
           ,[RentedOn]
           ,[ExitRequestedOn]
           ,[ExitApproved]
           ,[IsActive]
           ,[UpdatedDate]
           ,[UpdatedBy])
     VALUES
           (@TenantUId
           ,@RoomId
           ,@IsAdvancePaid
           ,@AdvancePaidDate
           ,@AdvancePendingAmount
           ,@RentPaidDate
           ,@RentedOn
           ,NULL
           ,0
           ,@IsActive
           ,GETDATE()
           ,@UpdatedBy)

    SELECT @TenantRoomDetailsId = SCOPE_IDENTITY();
END
GO
PRINT N'Creating Procedure [ROM].[UpdateTeantRoomExitDetails_V1]...';


GO
CREATE PROCEDURE [ROM].[UpdateTeantRoomExitDetails_V1]
	@TenantId NVARCHAR(100)
AS
BEGIN
	DECLARE @months int
	SELECT @months = R.AdvanceMoneyInMonths FROM ROM.Rooms R
	INNER JOIN ROM.TenantRoomDetails TRD ON TRD.RoomId = R.RoomId
	WHERE TRD.TenantUId = @TenantId and TRD.IsActive = 1

	UPDATE ROM.TenantRoomDetails
	SET ExitRequestedOn = GETDATE(), ExitApproved = 0, 
	UpdatedDate = GETDATE(), UpdatedBy = @TenantId
	WHERE TenantUId = @TenantId and IsActive = 1
END
GO
PRINT N'Creating Procedure [TRX].[GetTenantMonthYearTransactionByUId_V1]...';


GO
CREATE PROCEDURE [TRX].[GetTenantMonthYearTransactionByUId_V1]
	@TenantUID NVARCHAR(100)
AS
BEGIN
	SELECT 
		BillMonth, 
		BillYear
	FROM TRX.TransactionAmount TA
	INNER JOIN ROM.TenantRoomDetails TRD ON TRD.TenantRoomDetailsId = TA.TenantRoomDetailsId
	WHERE TRD.TenantUId = @TenantUID AND TRD.IsActive = 1
END
GO
PRINT N'Creating Procedure [TRX].[GetTenantTransactionByUIdAndMonthYear_V1]...';


GO
CREATE PROCEDURE [TRX].[GetTenantTransactionByUIdAndMonthYear_V1]
	@TenantUID NVARCHAR(100),
	@BillMonth INT,
	@BillYear INT
AS
BEGIN
	SELECT TA.WaterAmount + TA.PowerAmount + R.MaintenanceAmount + TA.PreviousAmount + TB.PendingAmount AS TotalAmount, 
	R.MaintenanceAmount, TA.PowerAmount, TA.WaterAmount, TA.PreviousAmount AS RepairAmount, TB.PendingAmount,
	CASE WHEN TRD.IsAdvancePaid = 1 THEN 0 ELSE TRD.AdvancePendingAmount END AS AdvancePendingAmount,
	TB.IsAmountPaid, PO.[Description] AS PaymentType, PS.[Description] AS PaymentStatus
	FROM rom.TenantRoomDetails TRD
	INNER JOIN ROM.Rooms R ON R.RoomId = TRD.RoomId
	INNER JOIN TRX.TransactionAmount TA ON TA.TenantRoomDetailsId = TRD.TenantRoomDetailsId
	INNER JOIN TRX.TransactionBills TB ON TB.TransactionAmountId = TA.TransactionAmountId
	INNER JOIN COM.PaymentOptions PO ON PO.Id = TB.PaidOptionsId
	INNER JOIN COM.PaymentStatus PS ON PS.Id = TB.PaymentStatusId
	WHERE TRD.TenantUId = @TenantUID AND TA.BillMonth = @BillMonth AND TA.BillYear = @BillYear
	AND TRD.IsActive = 1
END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [ROM].[Complaints] WITH CHECK CHECK CONSTRAINT [FK_Tenant_Room_Details_Id];

ALTER TABLE [TRX].[TransactionAmount] WITH CHECK CHECK CONSTRAINT [FK_Tenant_Room_Details_Id];

ALTER TABLE [ROM].[TenantRoomDetails] WITH CHECK CHECK CONSTRAINT [FK_Room_Id];


GO
PRINT N'Update complete.';


GO
