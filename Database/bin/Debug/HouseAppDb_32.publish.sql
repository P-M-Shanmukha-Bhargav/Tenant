/*
Deployment script for tenantappdev

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "tenantappdev"
:setvar DefaultFilePrefix "tenantappdev"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                AUTO_SHRINK OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Schema [COM]...';


GO
CREATE SCHEMA [COM]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [DML]...';


GO
CREATE SCHEMA [DML]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [ROM]...';


GO
CREATE SCHEMA [ROM]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [TRX]...';


GO
CREATE SCHEMA [TRX]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [USR]...';


GO
CREATE SCHEMA [USR]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Table [COM].[PaymentOptions]...';


GO
CREATE TABLE [COM].[PaymentOptions] (
    [Id]          INT            NOT NULL,
    [Code]        NVARCHAR (10)  NOT NULL,
    [Description] NVARCHAR (100) NOT NULL,
    [IsActive]    BIT            NOT NULL,
    [UpdatedDate] DATETIME       NULL,
    [UpdatedBy]   NVARCHAR (100) NULL,
    CONSTRAINT [PK_Payment_Options_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [COM].[PaymentStatus]...';


GO
CREATE TABLE [COM].[PaymentStatus] (
    [Id]          INT            NOT NULL,
    [Code]        NVARCHAR (10)  NOT NULL,
    [Description] NVARCHAR (100) NOT NULL,
    [IsActive]    BIT            NOT NULL,
    [UpdatedDate] DATETIME       NULL,
    [UpdatedBy]   NVARCHAR (100) NULL,
    CONSTRAINT [PK_Payment_Status_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [COM].[RoomType]...';


GO
CREATE TABLE [COM].[RoomType] (
    [Id]          INT            NOT NULL,
    [Code]        NVARCHAR (10)  NOT NULL,
    [Description] NVARCHAR (100) NOT NULL,
    [IsActive]    BIT            NOT NULL,
    [UpdatedDate] DATETIME       NULL,
    [UpdatedBy]   NVARCHAR (100) NULL,
    CONSTRAINT [PK_Room_Type_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [COM].[RoomSizeType]...';


GO
CREATE TABLE [COM].[RoomSizeType] (
    [Id]          INT            NOT NULL,
    [Code]        NVARCHAR (10)  NOT NULL,
    [Description] NVARCHAR (100) NOT NULL,
    [IsActive]    BIT            NOT NULL,
    [UpdatedDate] DATETIME       NULL,
    [UpdatedBy]   NVARCHAR (100) NULL,
    CONSTRAINT [PK_Room_Size_Type_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [COM].[ComplaintStatus]...';


GO
CREATE TABLE [COM].[ComplaintStatus] (
    [Id]          INT            NOT NULL,
    [Code]        NVARCHAR (10)  NOT NULL,
    [Description] NVARCHAR (100) NOT NULL,
    [IsActive]    BIT            NOT NULL,
    [UpdatedDate] DATETIME       NULL,
    [UpdatedBy]   NVARCHAR (100) NULL,
    CONSTRAINT [PK_Complaint_Status_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [ROM].[Complaints]...';


GO
CREATE TABLE [ROM].[Complaints] (
    [ComplaintId]         INT             IDENTITY (1, 1) NOT NULL,
    [TenantRoomDetailsId] INT             NOT NULL,
    [Title]               NVARCHAR (1000) NOT NULL,
    [Description]         NVARCHAR (1000) NOT NULL,
    [CreateDate]          DATETIME        NOT NULL,
    [UpdateDate]          DATETIME        NOT NULL,
    [ComplaintStatusId]   INT             NOT NULL,
    [IsActive]            BIT             NOT NULL,
    [UpdatedDate]         DATETIME        NULL,
    [UpdatedBy]           NVARCHAR (100)  NULL,
    CONSTRAINT [PK_Complaint_Id] PRIMARY KEY CLUSTERED ([ComplaintId] ASC)
);


GO
PRINT N'Creating Table [ROM].[Rooms]...';


GO
CREATE TABLE [ROM].[Rooms] (
    [RoomId]               UNIQUEIDENTIFIER NOT NULL,
    [OwnerUId]             NVARCHAR (50)    NOT NULL,
    [AdvanceMoneyInMonths] INT              NOT NULL,
    [IsForBachelor]        BIT              NOT NULL,
    [IsRentOpen]           BIT              NOT NULL,
    [IsOccupied]           BIT              NOT NULL,
    [MaintenanceAmount]    DECIMAL (10, 2)  NOT NULL,
    [RoomNumber]           NVARCHAR (10)    NOT NULL,
    [RentAmount]           DECIMAL (10, 2)  NOT NULL,
    [RoomSize]             INT              NOT NULL,
    [RoomSizeTypeId]       INT              NOT NULL,
    [RoomTypeId]           INT              NOT NULL,
    [IsActive]             BIT              NOT NULL,
    [UpdatedDate]          DATETIME         NULL,
    [UpdatedBy]            NVARCHAR (100)   NULL,
    CONSTRAINT [PK_Room_Id] PRIMARY KEY CLUSTERED ([RoomId] ASC)
);


GO
PRINT N'Creating Table [ROM].[TenantRoomDetails]...';


GO
CREATE TABLE [ROM].[TenantRoomDetails] (
    [TenantRoomDetailsId]  INT              IDENTITY (1, 1) NOT NULL,
    [TenantUId]            NVARCHAR (50)    NOT NULL,
    [RoomId]               UNIQUEIDENTIFIER NOT NULL,
    [IsAdvancePaid]        BIT              NOT NULL,
    [AdvancePaidDate]      DATETIME         NOT NULL,
    [AdvancePendingAmount] DECIMAL (10, 2)  NOT NULL,
    [RentPaidDate]         INT              NOT NULL,
    [RentedOn]             DATETIME         NOT NULL,
    [ExitRequestedOn]      DATETIME         NULL,
    [ExitApproved]         BIT              NOT NULL,
    [IsActive]             BIT              NOT NULL,
    [UpdatedDate]          DATETIME         NULL,
    [UpdatedBy]            NVARCHAR (100)   NULL,
    CONSTRAINT [PK_Tenant_Room_Details_Id] PRIMARY KEY CLUSTERED ([TenantRoomDetailsId] ASC)
);


GO
PRINT N'Creating Table [ROM].[RoomAddress]...';


GO
CREATE TABLE [ROM].[RoomAddress] (
    [RoomAddressId] INT              IDENTITY (1, 1) NOT NULL,
    [RoomId]        UNIQUEIDENTIFIER NOT NULL,
    [Address1]      NVARCHAR (100)   NOT NULL,
    [Address2]      NVARCHAR (100)   NULL,
    [Address3]      NVARCHAR (100)   NULL,
    [City]          NVARCHAR (100)   NOT NULL,
    [State]         NVARCHAR (100)   NOT NULL,
    [Zip]           NVARCHAR (100)   NOT NULL,
    [IsActive]      BIT              NOT NULL,
    [UpdatedDate]   DATETIME         NULL,
    [UpdatedBy]     NVARCHAR (100)   NULL,
    CONSTRAINT [PK_Room_Address_Id] PRIMARY KEY CLUSTERED ([RoomAddressId] ASC)
);


GO
PRINT N'Creating Table [TRX].[TransactionAmount]...';


GO
CREATE TABLE [TRX].[TransactionAmount] (
    [TransactionAmountId] INT             IDENTITY (1, 1) NOT NULL,
    [BillMonth]           NVARCHAR (50)   NOT NULL,
    [BillYear]            INT             NOT NULL,
    [TenantRoomDetailsId] INT             NOT NULL,
    [PowerAmount]         DECIMAL (10, 2) NOT NULL,
    [WaterAmount]         DECIMAL (10, 2) NOT NULL,
    [OtherAmount]         DECIMAL (10, 2) NOT NULL,
    [IsActive]            BIT             NOT NULL,
    [UpdatedDate]         DATETIME        NULL,
    [UpdatedBy]           NVARCHAR (100)  NULL,
    CONSTRAINT [PK_Transaction_Amount_Id] PRIMARY KEY CLUSTERED ([TransactionAmountId] ASC)
);


GO
PRINT N'Creating Table [TRX].[TransactionBills]...';


GO
CREATE TABLE [TRX].[TransactionBills] (
    [TransactionBillId]   UNIQUEIDENTIFIER NOT NULL,
    [TransactionAmountId] INT              NOT NULL,
    [IsAmountPaid]        BIT              NOT NULL,
    [PaymentStatusId]     INT              NULL,
    [PaidAmount]          DECIMAL (10, 2)  NOT NULL,
    [PendingAmount]       DECIMAL (10, 2)  NOT NULL,
    [PaidOn]              DATETIME         NULL,
    [PaidOptionsId]       INT              NULL,
    [PaidDesciption]      NVARCHAR (MAX)   NULL,
    [IsActive]            BIT              NOT NULL,
    [UpdatedDate]         DATETIME         NULL,
    [UpdatedBy]           NVARCHAR (100)   NULL,
    CONSTRAINT [PK_Transaction_Bill_Id] PRIMARY KEY CLUSTERED ([TransactionBillId] ASC)
);


GO
PRINT N'Creating Table [TRX].[TransactionPayment]...';


GO
CREATE TABLE [TRX].[TransactionPayment] (
    [Id] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [USR].[UserDetails]...';


GO
CREATE TABLE [USR].[UserDetails] (
    [UserDetailsId] INT              NOT NULL,
    [UserId]        UNIQUEIDENTIFIER NOT NULL
);


GO
PRINT N'Creating Table [USR].[UserTokens]...';


GO
CREATE TABLE [USR].[UserTokens] (
    [UserTokenId]  INT            IDENTITY (1, 1) NOT NULL,
    [UserId]       INT            NOT NULL,
    [RefreshToken] NVARCHAR (MAX) NOT NULL,
    [ExpiryTime]   DATETIME       NOT NULL,
    [IsActive]     BIT            NOT NULL,
    [UpdatedBy]    INT            NOT NULL,
    [UpdatedDate]  DATETIME       NOT NULL,
    CONSTRAINT [PK_User_Token_Id] PRIMARY KEY CLUSTERED ([UserTokenId] ASC)
);


GO
PRINT N'Creating Table [USR].[UserData]...';


GO
CREATE TABLE [USR].[UserData] (
    [UserId]       INT            IDENTITY (1, 1) NOT NULL,
    [DisplayName]  NVARCHAR (100) NOT NULL,
    [EmailId]      NVARCHAR (100) NOT NULL,
    [MobileNumber] NVARCHAR (15)  NOT NULL,
    [PasswordHash] VARCHAR (100)  NOT NULL,
    [UserTypeId]   INT            NOT NULL,
    [IsActive]     BIT            NOT NULL,
    [UpdatedBy]    INT            NOT NULL,
    [UpdatedDate]  DATETIME       NOT NULL,
    CONSTRAINT [PK_UserId] PRIMARY KEY CLUSTERED ([UserId] ASC),
    UNIQUE NONCLUSTERED ([EmailId] ASC),
    UNIQUE NONCLUSTERED ([MobileNumber] ASC)
);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [ROM].[Complaints] WITH NOCHECK
    ADD CONSTRAINT [FK_Tenant_Room_Details_Id] FOREIGN KEY ([TenantRoomDetailsId]) REFERENCES [ROM].[TenantRoomDetails] ([TenantRoomDetailsId]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Complaint_Status]...';


GO
ALTER TABLE [ROM].[Complaints] WITH NOCHECK
    ADD CONSTRAINT [FK_Complaint_Status] FOREIGN KEY ([ComplaintStatusId]) REFERENCES [COM].[ComplaintStatus] ([Id]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Room_Size_Type]...';


GO
ALTER TABLE [ROM].[Rooms] WITH NOCHECK
    ADD CONSTRAINT [FK_Room_Size_Type] FOREIGN KEY ([RoomSizeTypeId]) REFERENCES [COM].[RoomSizeType] ([Id]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Room_Type]...';


GO
ALTER TABLE [ROM].[Rooms] WITH NOCHECK
    ADD CONSTRAINT [FK_Room_Type] FOREIGN KEY ([RoomTypeId]) REFERENCES [COM].[RoomType] ([Id]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Room_Id]...';


GO
ALTER TABLE [ROM].[TenantRoomDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_Room_Id] FOREIGN KEY ([RoomId]) REFERENCES [ROM].[Rooms] ([RoomId]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Rooms_Id]...';


GO
ALTER TABLE [ROM].[RoomAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_Rooms_Id] FOREIGN KEY ([RoomId]) REFERENCES [ROM].[Rooms] ([RoomId]);


GO
PRINT N'Creating Foreign Key [TRX].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [TRX].[TransactionAmount] WITH NOCHECK
    ADD CONSTRAINT [FK_Tenant_Room_Details_Id] FOREIGN KEY ([TenantRoomDetailsId]) REFERENCES [ROM].[TenantRoomDetails] ([TenantRoomDetailsId]);


GO
PRINT N'Creating Foreign Key [TRX].[FK_Transaction_Amount_Id]...';


GO
ALTER TABLE [TRX].[TransactionBills] WITH NOCHECK
    ADD CONSTRAINT [FK_Transaction_Amount_Id] FOREIGN KEY ([TransactionAmountId]) REFERENCES [TRX].[TransactionAmount] ([TransactionAmountId]);


GO
PRINT N'Creating Foreign Key [TRX].[FK_Payment_Status_Id]...';


GO
ALTER TABLE [TRX].[TransactionBills] WITH NOCHECK
    ADD CONSTRAINT [FK_Payment_Status_Id] FOREIGN KEY ([PaymentStatusId]) REFERENCES [COM].[PaymentStatus] ([Id]);


GO
PRINT N'Creating Foreign Key [TRX].[FK_Paid_Options]...';


GO
ALTER TABLE [TRX].[TransactionBills] WITH NOCHECK
    ADD CONSTRAINT [FK_Paid_Options] FOREIGN KEY ([PaidOptionsId]) REFERENCES [COM].[PaymentOptions] ([Id]);


GO
PRINT N'Creating Foreign Key [USR].[FK_User_Id]...';


GO
ALTER TABLE [USR].[UserTokens] WITH NOCHECK
    ADD CONSTRAINT [FK_User_Id] FOREIGN KEY ([UserId]) REFERENCES [USR].[UserData] ([UserId]);


GO
PRINT N'Creating Procedure [DML].[Merge_COM.RoomType]...';


GO
CREATE PROCEDURE [DML].[Merge_COM.RoomType]
AS
 BEGIN
SET NOCOUNT ON

/*Initalized
Modified By - Shanmukh
Modified Date - 2023-07-18*/ 

MERGE INTO [COM].[RoomType] AS Target
USING (VALUES

(1,'1BHK', '1 BHK', 1, GETDATE(), NULL),
(2,'2BHK', '2 BHK', 1, GETDATE(), NULL),
(3,'3BHK', '3 BHK', 1, GETDATE(), NULL)


) AS Source ([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (Target.[Code] <> Source.[Code] OR Target.[Description] <> Source.[Description] OR Target.[IsActive] <> Source.[IsActive] OR Target.[UpdatedDate] <> Source.[UpdatedDate] OR Target.[UpdatedBy] <> Source.[UpdatedBy]) THEN
 UPDATE SET
 [Code] = Source.[Code], 
 [Description] = Source.[Description],
 [IsActive] = Source.[IsActive],
 [UpdatedDate] = Source.[UpdatedDate], 
 [UpdatedBy] = Source.[UpdatedBy]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
 VALUES(Source.[Id],Source.[Code],Source.[Description],Source.[IsActive],Source.[UpdatedDate],Source.[UpdatedBy])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE
;
 
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [COM].[RoomType]. Rows affected: ' + CAST(@mergeCount AS nvarchar(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[COM].[RoomType] rows affected by MERGE: ' + CAST(@mergeCount AS nvarchar(100));
 END
 
SET NOCOUNT OFF
END
GO
PRINT N'Creating Procedure [DML].[Merge_COM.RoomSizeType]...';


GO
CREATE PROCEDURE [DML].[Merge_COM.RoomSizeType]
AS
 BEGIN
SET NOCOUNT ON

/*Initalized
Modified By - Shanmukh
Modified Date - 2023-07-18*/ 

MERGE INTO [COM].[RoomSizeType] AS Target
USING (VALUES

(1,'SFT', 'Sq. Feet', 1, GETDATE(), NULL)


) AS Source ([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (Target.[Code] <> Source.[Code] OR Target.[Description] <> Source.[Description] OR Target.[IsActive] <> Source.[IsActive] OR Target.[UpdatedDate] <> Source.[UpdatedDate] OR Target.[UpdatedBy] <> Source.[UpdatedBy]) THEN
 UPDATE SET
 [Code] = Source.[Code], 
 [Description] = Source.[Description],
 [IsActive] = Source.[IsActive],
 [UpdatedDate] = Source.[UpdatedDate], 
 [UpdatedBy] = Source.[UpdatedBy]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
 VALUES(Source.[Id],Source.[Code],Source.[Description],Source.[IsActive],Source.[UpdatedDate],Source.[UpdatedBy])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE
;
 
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [COM].[RoomSizeType]. Rows affected: ' + CAST(@mergeCount AS nvarchar(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[COM].[RoomSizeType] rows affected by MERGE: ' + CAST(@mergeCount AS nvarchar(100));
 END
 
SET NOCOUNT OFF
END
GO
PRINT N'Creating Procedure [DML].[Merge_COM.PaymentStatus]...';


GO
CREATE PROCEDURE [DML].[Merge_COM.PaymentStatus]
AS
 BEGIN
SET NOCOUNT ON

/*Initalized
Modified By - Shanmukh
Modified Date - 2023-07-18*/ 

MERGE INTO [COM].[PaymentStatus] AS Target
USING (VALUES

(1,'PEND', 'Pending', 1, GETDATE(), NULL),
(2,'INIT', 'Initiated', 1, GETDATE(), NULL),
(3,'PAID', 'Payment Completed', 1, GETDATE(), NULL)


) AS Source ([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (Target.[Code] <> Source.[Code] OR Target.[Description] <> Source.[Description] OR Target.[IsActive] <> Source.[IsActive] OR Target.[UpdatedDate] <> Source.[UpdatedDate] OR Target.[UpdatedBy] <> Source.[UpdatedBy]) THEN
 UPDATE SET
 [Code] = Source.[Code], 
 [Description] = Source.[Description],
 [IsActive] = Source.[IsActive],
 [UpdatedDate] = Source.[UpdatedDate], 
 [UpdatedBy] = Source.[UpdatedBy]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
 VALUES(Source.[Id],Source.[Code],Source.[Description],Source.[IsActive],Source.[UpdatedDate],Source.[UpdatedBy])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE
;
 
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [COM].[PaymentStatus]. Rows affected: ' + CAST(@mergeCount AS nvarchar(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[COM].[PaymentStatus] rows affected by MERGE: ' + CAST(@mergeCount AS nvarchar(100));
 END
 
SET NOCOUNT OFF
END
GO
PRINT N'Creating Procedure [DML].[Merge_COM.PaymentOptions]...';


GO
CREATE PROCEDURE [DML].[Merge_COM.PaymentOptions]
 AS
 BEGIN
SET NOCOUNT ON

/*Initalized
Modified By - Shanmukh
Modified Date - 2023-07-18*/ 

MERGE INTO [COM].[PaymentOptions] AS Target
USING (VALUES

(1,'CASH', 'Cash Payment', 1, GETDATE(), NULL),
(2,'UPI', 'Upi Payment', 1, GETDATE(), NULL),
(3,'BANK', 'Bank Transfer', 1, GETDATE(), NULL)


) AS Source ([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (Target.[Code] <> Source.[Code] OR Target.[Description] <> Source.[Description] OR Target.[IsActive] <> Source.[IsActive] OR Target.[UpdatedDate] <> Source.[UpdatedDate] OR Target.[UpdatedBy] <> Source.[UpdatedBy]) THEN
 UPDATE SET
 [Code] = Source.[Code], 
 [Description] = Source.[Description],
 [IsActive] = Source.[IsActive],
 [UpdatedDate] = Source.[UpdatedDate], 
 [UpdatedBy] = Source.[UpdatedBy]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
 VALUES(Source.[Id],Source.[Code],Source.[Description],Source.[IsActive],Source.[UpdatedDate],Source.[UpdatedBy])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE
;
 
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [COM].[PaymentOptions]. Rows affected: ' + CAST(@mergeCount AS nvarchar(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[COM].[PaymentOptions] rows affected by MERGE: ' + CAST(@mergeCount AS nvarchar(100));
 END
 
SET NOCOUNT OFF
END
GO
PRINT N'Creating Procedure [DML].[Merge_COM.ComplaintStatus]...';


GO
CREATE PROCEDURE [DML].[Merge_COM.ComplaintStatus]
 AS
 BEGIN
SET NOCOUNT ON

/*Initalized
Modified By - Shanmukh
Modified Date - 2023-07-18*/ 

MERGE INTO [COM].[ComplaintStatus] AS Target
USING (VALUES

(1,'PEND', 'Pending', 1, GETDATE(), NULL)


) AS Source ([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
ON (Target.[Id] = Source.[Id])
WHEN MATCHED AND (Target.[Code] <> Source.[Code] OR Target.[Description] <> Source.[Description] OR Target.[IsActive] <> Source.[IsActive] OR Target.[UpdatedDate] <> Source.[UpdatedDate] OR Target.[UpdatedBy] <> Source.[UpdatedBy]) THEN
 UPDATE SET
 [Code] = Source.[Code], 
 [Description] = Source.[Description],
 [IsActive] = Source.[IsActive],
 [UpdatedDate] = Source.[UpdatedDate], 
 [UpdatedBy] = Source.[UpdatedBy]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Code],[Description],[IsActive],[UpdatedDate],[UpdatedBy])
 VALUES(Source.[Id],Source.[Code],Source.[Description],Source.[IsActive],Source.[UpdatedDate],Source.[UpdatedBy])
--WHEN NOT MATCHED BY SOURCE THEN 
-- DELETE
;
 
DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [COM].[ComplaintStatus]. Rows affected: ' + CAST(@mergeCount AS nvarchar(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[COM].[ComplaintStatus] rows affected by MERGE: ' + CAST(@mergeCount AS nvarchar(100));
 END
 
SET NOCOUNT OFF
END
GO
PRINT N'Creating Procedure [ROM].[GetRoomDetailsByRoomId_V1]...';


GO
CREATE PROCEDURE [ROM].[GetRoomDetailsByRoomId_V1]
	@RoomId UNIQUEIDENTIFIER
AS
BEGIN
	SELECT TRD.TenantUId, TRD.IsAdvancePaid, TRD.RentedOn, R.IsRentOpen, R.IsForBachelor, R.IsOccupied,
		R.MaintenanceAmount, R.RentAmount, R.AdvanceMoneyInMonths
	FROM ROM.Rooms R
	INNER JOIN ROM.TenantRoomDetails TRD ON TRD.RoomId = R.RoomId
	WHERE R.RoomId = @RoomId AND R.IsActive = 1 AND TRD.IsActive = 1
END
GO
PRINT N'Creating Procedure [ROM].[GetTenantListForOwner_V1]...';


GO
CREATE PROCEDURE [ROM].[GetTenantListForOwner_V1]
	@OwnerUId NVARCHAR(100)
AS
BEGIN
	SELECT TRD.TenantUId, R.RoomId, R.RoomNumber
	FROM ROM.Rooms R
	INNER JOIN ROM.TenantRoomDetails TRD ON TRD.RoomId = R.RoomId
	WHERE R.OwnerUId = @OwnerUId AND R.IsActive = 1 AND TRD.IsActive = 1
END
GO
PRINT N'Creating Procedure [ROM].[InsertRoomAddress_V1]...';


GO
CREATE PROCEDURE [ROM].[InsertRoomAddress_V1]
    @RoomAddressId INT OUTPUT,
	@RoomId	UNIQUEIDENTIFIER,
	@Address1 NVARCHAR(100),
	@Address2 NVARCHAR(100),
	@Address3 NVARCHAR(100),
	@City NVARCHAR(100),
	@State NVARCHAR(100),
	@Zip NVARCHAR(100),
    @IsActive BIT,
    @UpdatedBy NVARCHAR(100)
AS
BEGIN
INSERT INTO [ROM].[RoomAddress]
           ([RoomId]
           ,[Address1]
           ,[Address2]
           ,[Address3]
           ,[City]
           ,[State]
           ,[Zip]
           ,[IsActive]
           ,[UpdatedDate]
           ,[UpdatedBy])
     VALUES
           (@RoomId
           ,@Address1
           ,@Address2
           ,@Address3
           ,@City
           ,@State
           ,@Zip
           ,@IsActive
           ,GETDATE()
           ,@UpdatedBy)

    SELECT @RoomAddressId = SCOPE_IDENTITY();
END
GO
PRINT N'Creating Procedure [ROM].[InsertRoomDetails_V1]...';


GO
CREATE PROCEDURE [ROM].[InsertRoomDetails_V1]
	@RoomId UNIQUEIDENTIFIER,
    @OwnerUId NVARCHAR(100),
    @AdvanceMoneyInMonths INT,
    @IsForBachelor BIT,
    @IsRentOpen BIT,
    @IsOccupied BIT,
    @MaintenanceAmount DECIMAL(10,2),
    @RoomNumber NVARCHAR(100),
    @RentAmount  DECIMAL(10,2),
    @RoomSize INT,
    @RoomSizeTypeId INT,
    @RoomTypeId INT,
    @IsActive BIT,
    @UpdatedBy NVARCHAR(100)
AS
BEGIN
INSERT INTO [ROM].[Rooms]
           ([RoomId]
           ,[OwnerUId]
           ,[AdvanceMoneyInMonths]
           ,[IsForBachelor]
           ,[IsRentOpen]
           ,[IsOccupied]
           ,[MaintenanceAmount]
           ,[RoomNumber]
           ,[RentAmount]
           ,[RoomSize]
           ,[RoomSizeTypeId]
           ,[RoomTypeId]
           ,[IsActive]
           ,[UpdatedDate]
           ,[UpdatedBy])
     VALUES
           (@RoomId
           ,@OwnerUId
           ,@AdvanceMoneyInMonths
           ,@IsForBachelor
           ,@IsRentOpen
           ,@IsOccupied
           ,@MaintenanceAmount
           ,@RoomNumber
           ,@RentAmount
           ,@RoomSize
           ,@RoomSizeTypeId
           ,@RoomTypeId
           ,@IsActive
           ,GETDATE()
           ,@UpdatedBy)
END
GO
PRINT N'Creating Procedure [ROM].[InsertTenantRoomDetails_V1]...';


GO
CREATE PROCEDURE [ROM].[InsertTenantRoomDetails_V1]
    @TenantRoomDetailsId INT OUTPUT,
	@TenantUId NVARCHAR(100),
	@RoomId UNIQUEIDENTIFIER,
	@IsAdvancePaid BIT,
	@AdvancePaidDate DATETIME,
	@AdvancePendingAmount DECIMAL(10,2),
	@RentPaidDate INT,
	@RentedOn DATETIME,
	@IsActive BIT,
	@UpdatedBy NVARCHAR(100)
AS
BEGIN
INSERT INTO [ROM].[TenantRoomDetails]
           ([TenantUId]
           ,[RoomId]
           ,[IsAdvancePaid]
           ,[AdvancePaidDate]
           ,[AdvancePendingAmount]
           ,[RentPaidDate]
           ,[RentedOn]
           ,[ExitRequestedOn]
           ,[ExitApproved]
           ,[IsActive]
           ,[UpdatedDate]
           ,[UpdatedBy])
     VALUES
           (@TenantUId
           ,@RoomId
           ,@IsAdvancePaid
           ,@AdvancePaidDate
           ,@AdvancePendingAmount
           ,@RentPaidDate
           ,@RentedOn
           ,NULL
           ,0
           ,@IsActive
           ,GETDATE()
           ,@UpdatedBy)

    SELECT @TenantRoomDetailsId = SCOPE_IDENTITY();
END
GO
PRINT N'Creating Procedure [ROM].[UpdateTeantRoomExitDetails_V1]...';


GO
CREATE PROCEDURE [ROM].[UpdateTeantRoomExitDetails_V1]
	@TenantId NVARCHAR(100)
AS
BEGIN
	DECLARE @months INT
	SELECT @months = R.AdvanceMoneyInMonths FROM ROM.Rooms R
	INNER JOIN ROM.TenantRoomDetails TRD ON TRD.RoomId = R.RoomId
	WHERE TRD.TenantUId = @TenantId and TRD.IsActive = 1

	UPDATE ROM.TenantRoomDetails
	SET ExitRequestedOn = GETDATE(), ExitApproved = 0, 
	UpdatedDate = GETDATE(), UpdatedBy = @TenantId
	WHERE TenantUId = @TenantId and IsActive = 1
END
GO
PRINT N'Creating Procedure [TRX].[GetTenantMonthYearTransactionByUId_V1]...';


GO
CREATE PROCEDURE [TRX].[GetTenantMonthYearTransactionByUId_V1]
	@TenantUID NVARCHAR(100)
AS
BEGIN
	SELECT 
		BillMonth, 
		BillYear
	FROM TRX.TransactionAmount TA
	INNER JOIN ROM.TenantRoomDetails TRD ON TRD.TenantRoomDetailsId = TA.TenantRoomDetailsId
	WHERE TRD.TenantUId = @TenantUID AND TRD.IsActive = 1
END
GO
PRINT N'Creating Procedure [TRX].[InsertTransactionDetails_V1]...';


GO
CREATE PROCEDURE [TRX].[InsertTransactionDetails_V1]
	@TenantUID NVARCHAR(100),
	@BillMonth NVARCHAR(3),
	@BillYear INT,
	@PowerAmount DECIMAL(10,2),
	@OtherAmount DECIMAL(10,2),
	@WaterAmount DECIMAL(10,2),
    @IsActive BIT,
    @UpdatedBy NVARCHAR(100)
AS
BEGIN
	DECLARE @TenantRoomDetailsId INT, @TransactionAmountId INT
	IF NOT EXISTS(SELECT * from TRX.TransactionAmount TA
	INNER JOIN ROM.TenantRoomDetails TRD ON TRD.TenantRoomDetailsId = TA.TenantRoomDetailsId
	WHERE TA.BillMonth = @BillMonth AND TA.BillYear = @BillYear AND TRD.TenantUId = @TenantUID AND TRD.IsActive = 1)
		BEGIN
			SELECT @TenantRoomDetailsId = TRD.TenantRoomDetailsId from ROM.TenantRoomDetails TRD 
			WHERE TRD.TenantUId = @TenantUID AND TRD.IsActive = 1
	
			INSERT INTO [TRX].[TransactionAmount]
				   ([BillMonth],[BillYear],[TenantRoomDetailsId],[PowerAmount],[WaterAmount],[OtherAmount],[IsActive],[UpdatedDate],[UpdatedBy])
			 VALUES
				   (@BillMonth,@BillYear,@TenantRoomDetailsId,0,0,0,@IsActive,GETDATE(),@UpdatedBy)

			SELECT @TransactionAmountId = TransactionAmountId from TRX.TransactionAmount
				WHERE BillMonth = @BillMonth AND BillYear = @BillYear AND TenantRoomDetailsId = @TenantRoomDetailsId

			INSERT INTO [TRX].[TransactionBills]
				   ([TransactionBillId],[TransactionAmountId],[IsAmountPaid],[PaymentStatusId],[PaidAmount],[PendingAmount],[PaidOn],[PaidOptionsId],[PaidDesciption],[IsActive],[UpdatedDate],[UpdatedBy])
			 VALUES
				   (NEWID(),@TransactionAmountId,0,NULL,0.0,0.0,NULL,NULL,NULL,@IsActive,GETDATE(),@UpdatedBy)
		END
END
GO
PRINT N'Creating Procedure [TRX].[GetTenantTransactionByUIdAndMonthYear_V1]...';


GO
CREATE PROCEDURE [TRX].[GetTenantTransactionByUIdAndMonthYear_V1]
	@TenantUID NVARCHAR(100),
	@BillMonth NVARCHAR(3),
	@BillYear INT
AS
BEGIN
	SELECT ISNULL(TA.WaterAmount, 0) + ISNULL(TA.PowerAmount, 0) + ISNULL(R.MaintenanceAmount, 0) + ISNULL(TA.OtherAmount, 0) + ISNULL(TB.PendingAmount,0) + R.RentAmount AS TotalAmount, 
	R.RentAmount, R.MaintenanceAmount, TA.WaterAmount, TA.PowerAmount, TA.OtherAmount, TB.PendingAmount,
	CASE WHEN TRD.IsAdvancePaid = 1 THEN 0 ELSE TRD.AdvancePendingAmount END AS AdvancePendingAmount,
	CAST(TB.IsAmountPaid AS INT) AS IsAmountPaid, PO.[Description] AS PaymentType, PS.[Description] AS PaymentStatus
	FROM [ROM].TenantRoomDetails TRD
	INNER JOIN ROM.Rooms R ON R.RoomId = TRD.RoomId
	LEFT JOIN TRX.TransactionAmount TA ON TA.TenantRoomDetailsId = TRD.TenantRoomDetailsId AND TA.BillMonth = @BillMonth AND TA.BillYear = @BillYear
	LEFT JOIN TRX.TransactionBills TB ON TB.TransactionAmountId = TA.TransactionAmountId
	LEFT JOIN COM.PaymentOptions PO ON PO.Id = TB.PaidOptionsId
	LEFT JOIN COM.PaymentStatus PS ON PS.Id = TB.PaymentStatusId
	WHERE TRD.TenantUId = @TenantUID
	AND TRD.IsActive = 1
END
GO
PRINT N'Creating Procedure [TRX].[UpdateTeantTransactionBillPaymentStatus_V1]...';


GO
CREATE PROCEDURE [TRX].[UpdateTeantTransactionBillPaymentStatus_V1]
	@TenantId NVARCHAR(100),
	@PaymentStatus NVARCHAR(100),
	@Month NVARCHAR(3),
	@Year INT
AS
BEGIN
	DECLARE @StatusId INT

	SELECT @StatusId = PS.Id 
	FROM COM.PaymentStatus PS
	WHERE PS.Code = @PaymentStatus

	UPDATE TB
	SET PaymentStatusId = @StatusId, PaidOptionsId = 1,
	UpdatedDate = GETDATE(), UpdatedBy = @TenantId
	FROM TRX.TransactionBills TB
	INNER JOIN TRX.TransactionAmount TA ON TB.TransactionAmountId = TA.TransactionAmountId
	INNER JOIN ROM.TenantRoomDetails TRD ON TRD.TenantRoomDetailsId = TA.TenantRoomDetailsId
	WHERE TRD.TenantUId = @TenantId AND TRD.IsActive = 1 AND TA.BillMonth = @Month
	AND TA.BillYear = @Year
END
GO
PRINT N'Creating Procedure [USR].[IsEmailOrMobileExists]...';


GO
CREATE PROCEDURE [USR].[IsEmailOrMobileExists]
	@EmailId NVARCHAR(225),
	@MobileNumber NVARCHAR(225)
AS
BEGIN
	SELECT 
		CASE WHEN COUNT(USR2.EmailId) > 0 THEN 1 ELSE 0 END AS 'IsEmailExists', 
		CASE WHEN Count(USR3.MobileNumber) > 0 THEN 1 ELSE 0 END AS 'IsMobileExists' FROM [USR].[UserData] USR1
	LEFT OUTER JOIN [USR].[UserData] USR2 ON USR1.UserId = USR2.UserId AND USR2.EmailId = @EmailId
	LEFT OUTER JOIN [USR].[UserData] USR3 ON USR1.UserId = USR3.UserId AND USR3.MobileNumber = @MobileNumber
END
GO
PRINT N'Creating Procedure [USR].[InsertUserTokens]...';


GO
CREATE PROCEDURE [USR].[InsertUserTokens]
	@UserTokenId INT OUTPUT,
	@UserId INT,
	@RefreshToken NVARCHAR(225),
	@ExpiryTime DATETIME,
	@UpdatedBy INT,
	@IsActive BIT = 0
AS
BEGIN
	INSERT INTO [USR].[UserTokens](
		[UserId],
		[RefreshToken],
		[ExpiryTime],
		[IsActive],
		[UpdatedBy],
		[UpdatedDate])
	VALUES(
		@UserId,
		@RefreshToken,
		@ExpiryTime,
		@IsActive,
		@UpdatedBy,
		GETDATE())

	SELECT @UserTokenId = SCOPE_IDENTITY();
END
GO
PRINT N'Creating Procedure [USR].[InsertUserData]...';


GO
CREATE PROCEDURE [USR].[InsertUserData]
	@UserId INT OUTPUT,
	@DisplayName NVARCHAR(225),
	@UserTypeId INT,
	@EmailId NVARCHAR(225),
	@MobileNumber NVARCHAR(225),
	@PasswordHash NVARCHAR(225),
	@UpdatedBy INT,
	@IsActive BIT = 0
AS
BEGIN
	INSERT INTO [USR].[UserData](
		[DisplayName],
		[UserTypeId],
		[EmailId],
		[MobileNumber],
		[PasswordHash],
		[IsActive],
		[UpdatedBy],
		[UpdatedDate])
	VALUES(
		@DisplayName,
		@UserTypeId,
		@EmailId,
		@MobileNumber,
		@PasswordHash,
		@IsActive,
		@UpdatedBy,
		GETDATE())

	SELECT @UserId = SCOPE_IDENTITY();
END
GO
PRINT N'Creating Procedure [USR].[GetUserDetailsByRefreshToken]...';


GO
CREATE PROCEDURE [USR].[GetUserDetailsByRefreshToken]
	@RefreshToken NVARCHAR(225),
	@UserId INT
AS
BEGIN
	SELECT U.EmailId, U.PasswordHash FROM [USR].[UserTokens] UT
	INNER JOIN [USR].[UserData] U ON U.UserId = UT.UserId
	WHERE UT.RefreshToken = @RefreshToken AND UT.UserId = @UserId
END
GO
PRINT N'Creating Procedure [USR].[GetUserDetailsByEmail]...';


GO
CREATE PROCEDURE [USR].[GetUserDetailsByEmail]
	@EmailId NVARCHAR(225),
	@Password NVARCHAR(225)
AS
BEGIN
	SELECT UserId, UserTypeId, DisplayName FROM [USR].[UserData] 
	WHERE EmailId = @EmailId and PasswordHash = @Password
END
GO
PRINT N'Creating Procedure [DML].[Merge_RunAllScripts]...';


GO
CREATE PROCEDURE [DML].[Merge_RunAllScripts]
AS

     EXEC [DML].[Merge_COM.ComplaintStatus]
	 PRINT 'Executed [DML].[Merge_COM.ComplaintStatus] successfully'
	 
     EXEC [DML].[Merge_COM.PaymentOptions]
	 PRINT 'Executed [DML].[Merge_COM.PaymentOptions] successfully'
	 
     EXEC [DML].[Merge_COM.PaymentStatus]
	 PRINT 'Executed [DML].[Merge_COM.PaymentStatus] successfully'
	 
     EXEC [DML].[Merge_COM.RoomSizeType]
	 PRINT 'Executed [DML].[Merge_COM.RoomSizeType] successfully'
	 
     EXEC [DML].[Merge_COM.RoomType]
	 PRINT 'Executed [DML].[Merge_COM.RoomType] successfully'

RETURN 0
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [ROM].[Complaints] WITH CHECK CHECK CONSTRAINT [FK_Tenant_Room_Details_Id];

ALTER TABLE [ROM].[Complaints] WITH CHECK CHECK CONSTRAINT [FK_Complaint_Status];

ALTER TABLE [ROM].[Rooms] WITH CHECK CHECK CONSTRAINT [FK_Room_Size_Type];

ALTER TABLE [ROM].[Rooms] WITH CHECK CHECK CONSTRAINT [FK_Room_Type];

ALTER TABLE [ROM].[TenantRoomDetails] WITH CHECK CHECK CONSTRAINT [FK_Room_Id];

ALTER TABLE [ROM].[RoomAddress] WITH CHECK CHECK CONSTRAINT [FK_Rooms_Id];

ALTER TABLE [TRX].[TransactionAmount] WITH CHECK CHECK CONSTRAINT [FK_Tenant_Room_Details_Id];

ALTER TABLE [TRX].[TransactionBills] WITH CHECK CHECK CONSTRAINT [FK_Transaction_Amount_Id];

ALTER TABLE [TRX].[TransactionBills] WITH CHECK CHECK CONSTRAINT [FK_Payment_Status_Id];

ALTER TABLE [TRX].[TransactionBills] WITH CHECK CHECK CONSTRAINT [FK_Paid_Options];

ALTER TABLE [USR].[UserTokens] WITH CHECK CHECK CONSTRAINT [FK_User_Id];


GO
PRINT N'Update complete.';


GO
