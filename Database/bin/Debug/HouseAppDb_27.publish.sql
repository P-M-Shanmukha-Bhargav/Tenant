/*
Deployment script for HouseApp

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HouseApp"
:setvar DefaultFilePrefix "HouseApp"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping Foreign Key [ROM].[FK_Rooms_Id]...';


GO
ALTER TABLE [ROM].[RoomAddress] DROP CONSTRAINT [FK_Rooms_Id];


GO
PRINT N'Starting rebuilding table [ROM].[RoomAddress]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [ROM].[tmp_ms_xx_RoomAddress] (
    [RoomAddressId] INT              IDENTITY (1, 1) NOT NULL,
    [RoomId]        UNIQUEIDENTIFIER NOT NULL,
    [Address1]      NVARCHAR (100)   NOT NULL,
    [Address2]      NVARCHAR (100)   NULL,
    [Address3]      NVARCHAR (100)   NULL,
    [City]          NVARCHAR (100)   NOT NULL,
    [State]         NVARCHAR (100)   NOT NULL,
    [Zip]           NVARCHAR (100)   NOT NULL,
    [IsActive]      BIT              NOT NULL,
    [UpdatedDate]   DATETIME         NULL,
    [UpdatedBy]     NVARCHAR (100)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Room_Address_Id1] PRIMARY KEY CLUSTERED ([RoomAddressId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [ROM].[RoomAddress])
    BEGIN
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_RoomAddress] ON;
        INSERT INTO [ROM].[tmp_ms_xx_RoomAddress] ([RoomAddressId], [RoomId], [Address1], [Address2], [Address3], [City], [State], [Zip], [IsActive], [UpdatedDate], [UpdatedBy])
        SELECT   [RoomAddressId],
                 [RoomId],
                 [Address1],
                 [Address2],
                 [Address3],
                 [City],
                 [State],
                 [Zip],
                 [IsActive],
                 [UpdatedDate],
                 [UpdatedBy]
        FROM     [ROM].[RoomAddress]
        ORDER BY [RoomAddressId] ASC;
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_RoomAddress] OFF;
    END

DROP TABLE [ROM].[RoomAddress];

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_RoomAddress]', N'RoomAddress';

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_constraint_PK_Room_Address_Id1]', N'PK_Room_Address_Id', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Foreign Key [ROM].[FK_Rooms_Id]...';


GO
ALTER TABLE [ROM].[RoomAddress] WITH NOCHECK
    ADD CONSTRAINT [FK_Rooms_Id] FOREIGN KEY ([RoomId]) REFERENCES [ROM].[Rooms] ([RoomId]);


GO
PRINT N'Refreshing Procedure [ROM].[InsertRoomAddress_V1]...';


GO
EXECUTE sp_refreshsqlmodule N'[ROM].[InsertRoomAddress_V1]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [ROM].[RoomAddress] WITH CHECK CHECK CONSTRAINT [FK_Rooms_Id];


GO
PRINT N'Update complete.';


GO
