/*
Deployment script for HouseApp

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HouseApp"
:setvar DefaultFilePrefix "HouseApp"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [USR].[UserData]...';


GO
CREATE TABLE [USR].[UserData] (
    [UserId]       INT            IDENTITY (1, 1) NOT NULL,
    [DisplayName]  NVARCHAR (100) NOT NULL,
    [EmailId]      NVARCHAR (100) NOT NULL,
    [MobileNumber] NVARCHAR (15)  NOT NULL,
    [PasswordHash] VARCHAR (100)  NOT NULL,
    [UserTypeId]   INT            NOT NULL,
    [IsActive]     BIT            NOT NULL,
    [UpdatedBy]    INT            NOT NULL,
    [UpdatedDate]  DATETIME       NOT NULL,
    CONSTRAINT [PK_UserId] PRIMARY KEY CLUSTERED ([UserId] ASC),
    UNIQUE NONCLUSTERED ([EmailId] ASC),
    UNIQUE NONCLUSTERED ([MobileNumber] ASC)
);


GO
PRINT N'Creating Table [USR].[UserDetails]...';


GO
CREATE TABLE [USR].[UserDetails] (
    [UserDetailsId] INT              NOT NULL,
    [UserId]        UNIQUEIDENTIFIER NOT NULL
);


GO
PRINT N'Creating Table [USR].[UserTokens]...';


GO
CREATE TABLE [USR].[UserTokens] (
    [UserTokenId]  INT            IDENTITY (1, 1) NOT NULL,
    [UserId]       INT            NOT NULL,
    [RefreshToken] NVARCHAR (MAX) NOT NULL,
    [ExpiryTime]   DATETIME       NOT NULL,
    [IsActive]     BIT            NOT NULL,
    [UpdatedBy]    INT            NOT NULL,
    [UpdatedDate]  DATETIME       NOT NULL,
    CONSTRAINT [PK_User_Token_Id] PRIMARY KEY CLUSTERED ([UserTokenId] ASC)
);


GO
PRINT N'Creating Foreign Key [USR].[FK_User_Id]...';


GO
ALTER TABLE [USR].[UserTokens] WITH NOCHECK
    ADD CONSTRAINT [FK_User_Id] FOREIGN KEY ([UserId]) REFERENCES [USR].[UserData] ([UserId]);


GO
PRINT N'Altering Procedure [TRX].[GetTenantTransactionByUIdAndMonthYear_V1]...';


GO
ALTER PROCEDURE [TRX].[GetTenantTransactionByUIdAndMonthYear_V1]
	@TenantUID NVARCHAR(100),
	@BillMonth NVARCHAR(3),
	@BillYear INT
AS
BEGIN
	SELECT ISNULL(TA.WaterAmount, 0) + ISNULL(TA.PowerAmount, 0) + ISNULL(R.MaintenanceAmount, 0) + ISNULL(TA.OtherAmount, 0) + ISNULL(TB.PendingAmount,0) + R.RentAmount AS TotalAmount, 
	R.RentAmount, R.MaintenanceAmount, TA.WaterAmount, TA.PowerAmount, TA.OtherAmount, TB.PendingAmount,
	CASE WHEN TRD.IsAdvancePaid = 1 THEN 0 ELSE TRD.AdvancePendingAmount END AS AdvancePendingAmount,
	CAST(TB.IsAmountPaid AS INT) AS IsAmountPaid, PO.[Description] AS PaymentType, PS.[Description] AS PaymentStatus
	FROM [ROM].TenantRoomDetails TRD
	INNER JOIN ROM.Rooms R ON R.RoomId = TRD.RoomId
	LEFT JOIN TRX.TransactionAmount TA ON TA.TenantRoomDetailsId = TRD.TenantRoomDetailsId AND TA.BillMonth = @BillMonth AND TA.BillYear = @BillYear
	LEFT JOIN TRX.TransactionBills TB ON TB.TransactionAmountId = TA.TransactionAmountId
	LEFT JOIN COM.PaymentOptions PO ON PO.Id = TB.PaidOptionsId
	LEFT JOIN COM.PaymentStatus PS ON PS.Id = TB.PaymentStatusId
	WHERE TRD.TenantUId = @TenantUID
	AND TRD.IsActive = 1
END
GO
PRINT N'Creating Procedure [USR].[GetUserDetailsByEmail]...';


GO
CREATE PROCEDURE [USR].[GetUserDetailsByEmail]
	@EmailId NVARCHAR(225),
	@Password NVARCHAR(225)
AS
BEGIN
	SELECT UserId, UserTypeId, DisplayName FROM [USR].[UserData] 
	WHERE EmailId = @EmailId and PasswordHash = @Password
END
GO
PRINT N'Creating Procedure [USR].[GetUserDetailsByRefreshToken]...';


GO
CREATE PROCEDURE [USR].[GetUserDetailsByRefreshToken]
	@RefreshToken NVARCHAR(225),
	@UserId INT
AS
BEGIN
	SELECT U.EmailId, U.PasswordHash FROM [USR].[UserTokens] UT
	INNER JOIN [USR].[UserData] U ON U.UserId = UT.UserId
	WHERE UT.RefreshToken = @RefreshToken AND UT.UserId = @UserId
END
GO
PRINT N'Creating Procedure [USR].[InsertUserData]...';


GO
CREATE PROCEDURE [USR].[InsertUserData]
	@UserId INT OUTPUT,
	@DisplayName NVARCHAR(225),
	@UserTypeId INT,
	@EmailId NVARCHAR(225),
	@MobileNumber NVARCHAR(225),
	@PasswordHash NVARCHAR(225),
	@UpdatedBy INT,
	@IsActive BIT = 0
AS
BEGIN
	INSERT INTO [USR].[UserData](
		[DisplayName],
		[UserTypeId],
		[EmailId],
		[MobileNumber],
		[PasswordHash],
		[IsActive],
		[UpdatedBy],
		[UpdatedDate])
	VALUES(
		@DisplayName,
		@UserTypeId,
		@EmailId,
		@MobileNumber,
		@PasswordHash,
		@IsActive,
		@UpdatedBy,
		GETDATE())

	SELECT @UserId = SCOPE_IDENTITY();
END
GO
PRINT N'Creating Procedure [USR].[InsertUserTokens]...';


GO
CREATE PROCEDURE [USR].[InsertUserTokens]
	@UserTokenId INT OUTPUT,
	@UserId INT,
	@RefreshToken NVARCHAR(225),
	@ExpiryTime DATETIME,
	@UpdatedBy INT,
	@IsActive BIT = 0
AS
BEGIN
	INSERT INTO [USR].[UserTokens](
		[UserId],
		[RefreshToken],
		[ExpiryTime],
		[IsActive],
		[UpdatedBy],
		[UpdatedDate])
	VALUES(
		@UserId,
		@RefreshToken,
		@ExpiryTime,
		@IsActive,
		@UpdatedBy,
		GETDATE())

	SELECT @UserTokenId = SCOPE_IDENTITY();
END
GO
PRINT N'Creating Procedure [USR].[IsEmailOrMobileExists]...';


GO
CREATE PROCEDURE [USR].[IsEmailOrMobileExists]
	@EmailId NVARCHAR(225),
	@MobileNumber NVARCHAR(225)
AS
BEGIN
	SELECT 
		CASE WHEN COUNT(USR2.EmailId) > 0 THEN 1 ELSE 0 END AS 'IsEmailExists', 
		CASE WHEN Count(USR3.MobileNumber) > 0 THEN 1 ELSE 0 END AS 'IsMobileExists' FROM [USR].[UserData] USR1
	LEFT OUTER JOIN [USR].[UserData] USR2 ON USR1.UserId = USR2.UserId AND USR2.EmailId = @EmailId
	LEFT OUTER JOIN [USR].[UserData] USR3 ON USR1.UserId = USR3.UserId AND USR3.MobileNumber = @MobileNumber
END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [USR].[UserTokens] WITH CHECK CHECK CONSTRAINT [FK_User_Id];


GO
PRINT N'Update complete.';


GO
