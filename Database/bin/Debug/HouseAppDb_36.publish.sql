/*
Deployment script for HouseApp

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HouseApp"
:setvar DefaultFilePrefix "HouseApp"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER19\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [ROM].[TenantRoomDetails].[IsBillsOwnerControl] on table [ROM].[TenantRoomDetails] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [ROM].[TenantRoomDetails])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [TRX].[TransactionAmount].[IsOwnerControl] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [TRX].[TransactionAmount])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping Foreign Key [TRX].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [TRX].[TransactionAmount] DROP CONSTRAINT [FK_Tenant_Room_Details_Id];


GO
PRINT N'Dropping Foreign Key [ROM].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [ROM].[Complaints] DROP CONSTRAINT [FK_Tenant_Room_Details_Id];


GO
PRINT N'Dropping Foreign Key [ROM].[FK_Room_Id]...';


GO
ALTER TABLE [ROM].[TenantRoomDetails] DROP CONSTRAINT [FK_Room_Id];


GO
PRINT N'Starting rebuilding table [ROM].[TenantRoomDetails]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [ROM].[tmp_ms_xx_TenantRoomDetails] (
    [TenantRoomDetailsId]  INT              IDENTITY (1, 1) NOT NULL,
    [TenantUId]            NVARCHAR (50)    NOT NULL,
    [RoomId]               UNIQUEIDENTIFIER NOT NULL,
    [IsAdvancePaid]        BIT              NOT NULL,
    [AdvancePaidDate]      DATETIME         NOT NULL,
    [AdvancePendingAmount] DECIMAL (10, 2)  NOT NULL,
    [RentPaidDate]         INT              NOT NULL,
    [RentedOn]             DATETIME         NOT NULL,
    [ExitRequestedOn]      DATETIME         NULL,
    [ExitApproved]         BIT              NOT NULL,
    [IsBillsOwnerControl]  BIT              NOT NULL,
    [IsActive]             BIT              NOT NULL,
    [UpdatedDate]          DATETIME         NULL,
    [UpdatedBy]            NVARCHAR (100)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Tenant_Room_Details_Id1] PRIMARY KEY CLUSTERED ([TenantRoomDetailsId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [ROM].[TenantRoomDetails])
    BEGIN
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_TenantRoomDetails] ON;
        INSERT INTO [ROM].[tmp_ms_xx_TenantRoomDetails] ([TenantRoomDetailsId], [TenantUId], [RoomId], [IsAdvancePaid], [AdvancePaidDate], [AdvancePendingAmount], [RentPaidDate], [RentedOn], [ExitRequestedOn], [ExitApproved], [IsActive], [UpdatedDate], [UpdatedBy])
        SELECT   [TenantRoomDetailsId],
                 [TenantUId],
                 [RoomId],
                 [IsAdvancePaid],
                 [AdvancePaidDate],
                 [AdvancePendingAmount],
                 [RentPaidDate],
                 [RentedOn],
                 [ExitRequestedOn],
                 [ExitApproved],
                 [IsActive],
                 [UpdatedDate],
                 [UpdatedBy]
        FROM     [ROM].[TenantRoomDetails]
        ORDER BY [TenantRoomDetailsId] ASC;
        SET IDENTITY_INSERT [ROM].[tmp_ms_xx_TenantRoomDetails] OFF;
    END

DROP TABLE [ROM].[TenantRoomDetails];

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_TenantRoomDetails]', N'TenantRoomDetails';

EXECUTE sp_rename N'[ROM].[tmp_ms_xx_constraint_PK_Tenant_Room_Details_Id1]', N'PK_Tenant_Room_Details_Id', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Table [TRX].[TransactionAmount]...';


GO
ALTER TABLE [TRX].[TransactionAmount] DROP COLUMN [IsOwnerControl];


GO
PRINT N'Creating Foreign Key [TRX].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [TRX].[TransactionAmount] WITH NOCHECK
    ADD CONSTRAINT [FK_Tenant_Room_Details_Id] FOREIGN KEY ([TenantRoomDetailsId]) REFERENCES [ROM].[TenantRoomDetails] ([TenantRoomDetailsId]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Tenant_Room_Details_Id]...';


GO
ALTER TABLE [ROM].[Complaints] WITH NOCHECK
    ADD CONSTRAINT [FK_Tenant_Room_Details_Id] FOREIGN KEY ([TenantRoomDetailsId]) REFERENCES [ROM].[TenantRoomDetails] ([TenantRoomDetailsId]);


GO
PRINT N'Creating Foreign Key [ROM].[FK_Room_Id]...';


GO
ALTER TABLE [ROM].[TenantRoomDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_Room_Id] FOREIGN KEY ([RoomId]) REFERENCES [ROM].[Rooms] ([RoomId]);


GO
PRINT N'Altering Procedure [ROM].[InsertTenantRoomDetails_V1]...';


GO
ALTER PROCEDURE [ROM].[InsertTenantRoomDetails_V1]
    @TenantRoomDetailsId INT OUTPUT,
	@TenantUId NVARCHAR(100),
	@RoomId UNIQUEIDENTIFIER,
	@IsAdvancePaid BIT,
	@AdvancePaidDate DATETIME,
	@AdvancePendingAmount DECIMAL(10,2),
	@RentPaidDate INT,
	@RentedOn DATETIME,
    @IsBillsOwnerControl BIT,
	@IsActive BIT,
	@UpdatedBy NVARCHAR(100)
AS
BEGIN
INSERT INTO [ROM].[TenantRoomDetails]
           ([TenantUId]
           ,[RoomId]
           ,[IsAdvancePaid]
           ,[AdvancePaidDate]
           ,[AdvancePendingAmount]
           ,[RentPaidDate]
           ,[RentedOn]
           ,[ExitRequestedOn]
           ,[ExitApproved]
           ,[IsBillsOwnerControl]
           ,[IsActive]
           ,[UpdatedDate]
           ,[UpdatedBy])
     VALUES
           (@TenantUId
           ,@RoomId
           ,@IsAdvancePaid
           ,@AdvancePaidDate
           ,@AdvancePendingAmount
           ,@RentPaidDate
           ,@RentedOn
           ,NULL
           ,0
           ,@IsBillsOwnerControl
           ,@IsActive
           ,GETDATE()
           ,@UpdatedBy)

    SELECT @TenantRoomDetailsId = SCOPE_IDENTITY();
END
GO
PRINT N'Altering Procedure [TRX].[GetTenantTransactionByUIdAndMonthYear_V1]...';


GO
ALTER PROCEDURE [TRX].[GetTenantTransactionByUIdAndMonthYear_V1]
	@TenantUID NVARCHAR(100),
	@BillMonth NVARCHAR(3),
	@BillYear INT
AS
BEGIN
	SELECT ISNULL(TA.WaterAmount, 0) + ISNULL(TA.PowerAmount, 0) + ISNULL(R.MaintenanceAmount, 0) + ISNULL(TA.OtherAmount, 0) + ISNULL(TB.PendingAmount,0) + R.RentAmount AS TotalAmount, 
	R.RentAmount, R.MaintenanceAmount, TA.WaterAmount, TA.PowerAmount, TA.OtherAmount, TB.PendingAmount,
	CASE WHEN TRD.IsAdvancePaid = 1 THEN 0 ELSE TRD.AdvancePendingAmount END AS AdvancePendingAmount,
	CAST(TB.IsAmountPaid AS INT) AS IsAmountPaid, PO.[Description] AS PaymentType, PS.[Description] AS PaymentStatus,
	TRD.IsBillsOwnerControl
	FROM [ROM].TenantRoomDetails TRD
	INNER JOIN ROM.Rooms R ON R.RoomId = TRD.RoomId
	LEFT JOIN TRX.TransactionAmount TA ON TA.TenantRoomDetailsId = TRD.TenantRoomDetailsId AND TA.BillMonth = @BillMonth AND TA.BillYear = @BillYear
	LEFT JOIN TRX.TransactionBills TB ON TB.TransactionAmountId = TA.TransactionAmountId
	LEFT JOIN COM.PaymentOptions PO ON PO.Id = TB.PaidOptionsId
	LEFT JOIN COM.PaymentStatus PS ON PS.Id = TB.PaymentStatusId
	WHERE TRD.TenantUId = @TenantUID
	AND TRD.IsActive = 1
END
GO
PRINT N'Refreshing Procedure [ROM].[GetRoomDetailsByRoomId_V1]...';


GO
EXECUTE sp_refreshsqlmodule N'[ROM].[GetRoomDetailsByRoomId_V1]';


GO
PRINT N'Refreshing Procedure [ROM].[GetTenantListForOwner_V1]...';


GO
EXECUTE sp_refreshsqlmodule N'[ROM].[GetTenantListForOwner_V1]';


GO
PRINT N'Refreshing Procedure [ROM].[UpdateTeantRoomExitDetails_V1]...';


GO
EXECUTE sp_refreshsqlmodule N'[ROM].[UpdateTeantRoomExitDetails_V1]';


GO
PRINT N'Refreshing Procedure [TRX].[GetTenantMonthYearTransactionByUId_V1]...';


GO
EXECUTE sp_refreshsqlmodule N'[TRX].[GetTenantMonthYearTransactionByUId_V1]';


GO
PRINT N'Refreshing Procedure [TRX].[InsertTransactionDetails_V1]...';


GO
EXECUTE sp_refreshsqlmodule N'[TRX].[InsertTransactionDetails_V1]';


GO
PRINT N'Refreshing Procedure [TRX].[UpdateTeantTransactionBillPaymentStatus_V1]...';


GO
EXECUTE sp_refreshsqlmodule N'[TRX].[UpdateTeantTransactionBillPaymentStatus_V1]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [TRX].[TransactionAmount] WITH CHECK CHECK CONSTRAINT [FK_Tenant_Room_Details_Id];

ALTER TABLE [ROM].[Complaints] WITH CHECK CHECK CONSTRAINT [FK_Tenant_Room_Details_Id];

ALTER TABLE [ROM].[TenantRoomDetails] WITH CHECK CHECK CONSTRAINT [FK_Room_Id];


GO
PRINT N'Update complete.';


GO
